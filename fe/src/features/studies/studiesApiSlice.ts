// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import { environment } from "../../environment/environment"
import type { Study } from "../../app/models"

interface StudiesListResponse {
  studies: Study[]
}

interface StudiesGetResponse {
  study: Study
}

// Define a service using a base URL and expected endpoints
export const studiesApiSlice = createApi({
  baseQuery: fetchBaseQuery({
    baseUrl: `${environment.apiUrl}/studies`,
    prepareHeaders: headers => {
      const accessToken = localStorage.getItem("token")
      if (accessToken) {
        headers.set("authorization", `Bearer ${accessToken}`)
        headers.set("Content-Type", "application/json")
      }
      return headers
    },
  }),
  reducerPath: "studiesApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Studies"],
  endpoints: build => ({
    list: build.query<StudiesListResponse, void>({
      query: arg => "?limit=100",
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error) =>
        result?.studies
          ? [
              ...result.studies.map(({ id }) => ({
                type: "Studies" as const,
                id,
              })),
              { type: "Studies", id: "LIST" },
            ]
          : [{ type: "Studies", id: "LIST" }],
    }),
    get: build.query<StudiesGetResponse, string>({
      query: id => `/${id}`,
      providesTags: (result, error, id) => [{ type: "Studies", id }],
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useListQuery, useGetQuery } = studiesApiSlice
